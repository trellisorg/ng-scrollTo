{"version":3,"sources":["../src/scrollTo.service.ts"],"names":[],"mappings":";;AAAA,sCAA2C;AAE3C,wCAAuC;AAGvC;IAEI;IAAe,CAAC;IAET,kCAAQ,GAAf,UAAgB,OAA6B,EAAE,QAAsB,EAAE,MAAkB;QAA1C,yBAAA,EAAA,cAAsB;QAAE,uBAAA,EAAA,UAAkB;QAC3F,IAAI,OAAO,GAAiB,IAAI,iBAAO,EAAO,CAAC;QACzC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC9B,IAAI,EAAE,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAiB,CAAC,CAAC;YACnD,IAAI,CAAC,eAAe,CAAC,EAAiB,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACvE,CAAC;QAAA,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,WAAW,CAAC,CAAC,CAAC;YACvC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;QAAA,IAAI,CAAC,CAAC;YACZ,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAClC,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEO,yCAAe,GAAvB,UAAwB,EAAe,EAAE,QAAgB,EAAE,MAAc,EAAE,OAAO;QAC9E,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACd,IAAI,cAAc,GAAG,EAAE,CAAC,qBAAqB,EAAE,CAAC;YAChD,IAAI,SAAS,GAAG,cAAc,CAAC,GAAG,GAAG,MAAM,CAAC,WAAW,CAAC;YAC/C,IAAI,CAAC,WAAW,CAAC,SAAS,GAAG,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,OAAO,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;QACxC,CAAC;QACD,MAAM,CAAC,OAAO,CAAC;IACnB,CAAC;IAEO,qCAAW,GAAnB,UAAoB,QAAQ,EAAE,QAAQ,EAAE,OAAqB;QACzD,IAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC;QACrC,IAAM,IAAI,GAAG,QAAQ,GAAG,SAAS,CAAC;QAClC,IAAI,KAAK,CAAC;QAEV,MAAM,CAAC,qBAAqB,CAAC,cAAc,SAAS;YAChD,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,SAAS,GAAG,KAAK,CAAC;YAErC,IAAM,IAAI,GAAG,SAAS,GAAG,KAAK,CAAC;YAC/B,IAAI,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,QAAQ,EAAE,CAAC,CAAC,CAAC;YAE3C,MAAM,CAAC,QAAQ,CAAC,CAAC,EAAE,SAAS,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC;YAE/C,EAAE,CAAC,CAAC,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;gBACnC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACrB,CAAC;YAAA,IAAI,CAAC,CAAC;gBACN,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC7B,CAAC;QACI,CAAC,CAAC,CAAC;IACP,CAAC;IAOL,sBAAC;AAAD,CAvDA,AAuDC;AANM,0BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AAtDW,0CAAe","file":"scrollTo.service.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n\r\nexport class ScrollToService {\r\n\r\n    constructor() {}\r\n\r\n    public scrollTo(element: string | HTMLElement, duration: number = 500, offset: number = 0): Observable<any> {\r\n\t\tlet subject: Subject<any> = new Subject<any>();\r\n        if (typeof element === 'string') {\r\n            let el = document.querySelector(element as string);\r\n            this.scrollToElement(el as HTMLElement, duration, offset, subject);\r\n        }else if (element instanceof HTMLElement) {\r\n            this.scrollToElement(element, duration, offset, subject);\r\n        }else {\r\n\t\t\tsubject.error('I don\\'t find element');\r\n        }\r\n        return subject;\r\n    }\r\n\r\n    private scrollToElement(el: HTMLElement, duration: number, offset: number, subject) {\r\n        if (el) {\r\n\t\t\tlet viewportOffset = el.getBoundingClientRect();\r\n\t\t\tlet offsetTop = viewportOffset.top + window.pageYOffset;\r\n            this.doScrolling(offsetTop + offset, duration, subject);\r\n        } else {\r\n        \tsubject.error('I don\\'t find element');\r\n        }\r\n        return subject;\r\n    }\r\n\r\n    private doScrolling(elementY, duration, subject: Subject<any>) {\r\n        const startingY = window.pageYOffset;\r\n        const diff = elementY - startingY;\r\n        let start;\r\n\r\n        window.requestAnimationFrame(function step(timestamp) {\r\n            start = (!start) ? timestamp : start;\r\n\r\n            const time = timestamp - start;\r\n            let percent = Math.min(time / duration, 1);\r\n\r\n            window.scrollTo(0, startingY + diff * percent);\r\n\r\n            if (time < duration) {\r\n                window.requestAnimationFrame(step);\r\n                subject.next({});\r\n            }else {\r\n            \tsubject.complete();\r\n\t\t\t}\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}